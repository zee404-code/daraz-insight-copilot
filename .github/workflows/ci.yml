# This is the name of your workflow
name: MLOps Milestone 1 CI

on:
  push:
    branches: [ "main" ]
  pull_request:

# Set global permissions for the workflow
permissions:
  contents: read      # To checkout the code
  packages: write     # To push Docker images to GHCR
  security-events: write # To upload security scan results

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install linting libraries
        run: pip install ruff black

      - name: Run Ruff (Linter)
        run: ruff check src tests

      - name: Run Black (Formatter Check)
        run: black --check src tests

  test:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run Pytest with Coverage
        run: PYTHONPATH=src pytest --cov=src/app --cov-fail-under=80 tests/

  security-scan:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Upgrade base packages
        run: pip install --upgrade pip setuptools

      - name: Install dependencies
        run: |
          pip install -r requirements.txt pip-audit

      - name: Run pip-audit
        run: pip-audit

  build-and-push:
    needs: security-scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry (GHCR)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ github.sha }}

  canary-deploy-and-acceptance-test:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Log in to GitHub Container Registry (GHCR)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull the image
        run: docker pull ghcr.io/${{ github.repository }}:${{ github.sha }}

      - name: Run Canary Deployment
        run: |
          docker run -d --name canary -p 8001:8000 \
            -e CANARY=true \
            ghcr.io/${{ github.repository }}:${{ github.sha }}

      # ðŸªµ Wait briefly then show logs
      - name: Debug - Show container logs
        run: |
          echo "Waiting a few seconds for app startup..."
          sleep 5
          docker logs canary

      # List model directory contents
      - name: Debug - List model directory
        run: docker exec canary ls -lh /app/models

      - name: Wait for Canary to be healthy
        run: |
          echo "Waiting for canary to start..."
          timeout 30s bash -c 'until curl -sf http://localhost:8001/health; do sleep 1; done'
          echo "Canary is healthy!"

      # Run acceptance tests directly while container is still running
      - name: Run Acceptance Tests
        run: |
          python - <<EOF
          import json, requests, sys
          print("Running acceptance tests against http://localhost:8001")

          try:
              with open('tests/golden_queries.json', 'r') as f:
                  queries = json.load(f)
          except FileNotFoundError:
              print("::error::Golden queries file not found at tests/golden_queries.json")
              sys.exit(1)

          # Test 1: Health endpoint
          health = requests.get('http://localhost:8001/health')
          assert health.status_code == 200, f"Health check failed: {health.status_code}"
          data = health.json()
          assert data.get('canary') == 'true', "Canary flag not true"
          print(" Health check passed ")

          # Test 2: Prediction endpoint
          for i, q in enumerate(queries):
              print(f"Testing golden query {i+1}...")
              r = requests.post('http://localhost:8001/predict', json=q)
              if r.status_code != 200:
                  print(f"::error::Golden query {i+1} failed with status {r.status_code}")
                  sys.exit(1)
              resp = r.json()
              assert 'predicted_success_score' in resp, 'Missing prediction key'
              print(f" Golden query {i+1} passed ")

          print(" All acceptance tests passed! ")
          EOF
